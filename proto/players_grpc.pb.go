// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: players.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlayersServiceClient is the client API for PlayersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayersServiceClient interface {
	PlayerLocation(ctx context.Context, opts ...grpc.CallOption) (PlayersService_PlayerLocationClient, error)
}

type playersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayersServiceClient(cc grpc.ClientConnInterface) PlayersServiceClient {
	return &playersServiceClient{cc}
}

func (c *playersServiceClient) PlayerLocation(ctx context.Context, opts ...grpc.CallOption) (PlayersService_PlayerLocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlayersService_ServiceDesc.Streams[0], "/players.PlayersService/PlayerLocation", opts...)
	if err != nil {
		return nil, err
	}
	x := &playersServicePlayerLocationClient{stream}
	return x, nil
}

type PlayersService_PlayerLocationClient interface {
	Send(*PlayerReq) error
	Recv() (*PlayerResp, error)
	grpc.ClientStream
}

type playersServicePlayerLocationClient struct {
	grpc.ClientStream
}

func (x *playersServicePlayerLocationClient) Send(m *PlayerReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *playersServicePlayerLocationClient) Recv() (*PlayerResp, error) {
	m := new(PlayerResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlayersServiceServer is the server API for PlayersService service.
// All implementations must embed UnimplementedPlayersServiceServer
// for forward compatibility
type PlayersServiceServer interface {
	PlayerLocation(PlayersService_PlayerLocationServer) error
	mustEmbedUnimplementedPlayersServiceServer()
}

// UnimplementedPlayersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlayersServiceServer struct {
}

func (UnimplementedPlayersServiceServer) PlayerLocation(PlayersService_PlayerLocationServer) error {
	return status.Errorf(codes.Unimplemented, "method PlayerLocation not implemented")
}
func (UnimplementedPlayersServiceServer) mustEmbedUnimplementedPlayersServiceServer() {}

// UnsafePlayersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayersServiceServer will
// result in compilation errors.
type UnsafePlayersServiceServer interface {
	mustEmbedUnimplementedPlayersServiceServer()
}

func RegisterPlayersServiceServer(s grpc.ServiceRegistrar, srv PlayersServiceServer) {
	s.RegisterService(&PlayersService_ServiceDesc, srv)
}

func _PlayersService_PlayerLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlayersServiceServer).PlayerLocation(&playersServicePlayerLocationServer{stream})
}

type PlayersService_PlayerLocationServer interface {
	Send(*PlayerResp) error
	Recv() (*PlayerReq, error)
	grpc.ServerStream
}

type playersServicePlayerLocationServer struct {
	grpc.ServerStream
}

func (x *playersServicePlayerLocationServer) Send(m *PlayerResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *playersServicePlayerLocationServer) Recv() (*PlayerReq, error) {
	m := new(PlayerReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlayersService_ServiceDesc is the grpc.ServiceDesc for PlayersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "players.PlayersService",
	HandlerType: (*PlayersServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PlayerLocation",
			Handler:       _PlayersService_PlayerLocation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "players.proto",
}
